package com.joel.br.AutoClipster.config;

import com.google.genai.Client;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.lang.reflect.Field;
import java.util.Collections;
import java.util.Map;

/**
 * Configura√ß√£o central para integra√ß√£o com Google Gemini
 * Usa a biblioteca oficial com.google.genai seguindo a documenta√ß√£o do Google
 */
@Configuration
@Slf4j
@Getter
public class GeminiConfig {

    /**
     * API Key do Gemini
     */
    @Value("${gemini.api.key}")
    private String apiKey;

    /**
     * Modelo a ser usado - permite trocar facilmente
     * gemini-2.0-flash-001 (mais novo) ou gemini-1.5-flash (est√°vel)
     */
    @Value("${gemini.model.name:gemini-2.0-flash-001}")
    private String modelName;

    /**
     * Temperatura para criatividade (0.0 a 1.0)
     * 0.7 = bom balan√ßo entre criatividade e consist√™ncia
     */
    @Value("${gemini.temperature:0.7}")
    private float temperature;

    /**
     * M√°ximo de tokens na resposta
     */
    @Value("${gemini.max-tokens:8192}")
    private int maxTokens;

    /**
     * Top P - controla diversidade
     */
    @Value("${gemini.top-p:0.9}")
    private float topP;

    /**
     * Top K - limita tokens considerados
     */
    @Value("${gemini.top-k:40}")
    private int topK;

    /**
     * Bean principal do Gemini Client
     * Usando a nova API simplificada da vers√£o 1.1.0
     */
    @Bean
    public Client geminiClient() {
        try {
            log.info("ü§ñ Configurando Gemini Client...");
            
            if (apiKey == null || apiKey.trim().isEmpty() || apiKey.startsWith("your_")) {
                throw new IllegalArgumentException("API Key do Gemini n√£o configurada ou inv√°lida");
            }

            // Nova API simplificada - vers√£o 1.1.0
            Client client = Client.builder().apiKey(apiKey).build();

            log.info("‚úÖ Gemini Client configurado com sucesso");
            log.info("üìä Usando modelo: {}", modelName);
            
            return client;

        } catch (Exception e) {
            log.error("‚ùå Erro ao configurar Gemini Client: {}", e.getMessage());
            log.error("üí° Verifique se GEMINI_API_KEY est√° configurado no .env");
            throw new RuntimeException("Falha na configura√ß√£o do Gemini: " + e.getMessage(), e);
        }
    }

    /**
     * Configura√ß√µes para gera√ß√£o de conte√∫do
     * Seguindo o formato esperado pela API do Google
     */
    @Bean
    public GeminiSettings geminiSettings() {
        return GeminiSettings.builder()
            .temperature(temperature)
            .topP(topP)
            .topK(topK)
            .maxOutputTokens(maxTokens)
            .modelName(modelName)
            .build();
    }

    /**
     * M√©todo utilit√°rio para verificar se a configura√ß√£o est√° v√°lida
     */
    public boolean isConfigurationValid() {
        if (apiKey == null || apiKey.trim().isEmpty() || apiKey.startsWith("your_")) {
            log.warn("‚ö†Ô∏è API Key do Gemini n√£o configurada ou inv√°lida");
            return false;
        }
        
        log.info("‚úÖ Configura√ß√£o do Gemini v√°lida");
        return true;
    }

    /**
     * Log das configura√ß√µes atuais (sem mostrar dados sens√≠veis)
     */
    public void logConfiguration() {
        log.info("üìä Configura√ß√µes do Gemini:");
        log.info("  ‚îú‚îÄ‚îÄ Modelo: {}", modelName);
        log.info("  ‚îú‚îÄ‚îÄ API Key: {}", apiKey != null && !apiKey.startsWith("your_") ? "‚úÖ Configurado" : "‚ùå Ausente/Inv√°lido");
        log.info("  ‚îú‚îÄ‚îÄ Temperatura: {}", temperature);
        log.info("  ‚îú‚îÄ‚îÄ Max Tokens: {}", maxTokens);
        log.info("  ‚îú‚îÄ‚îÄ Top P: {}", topP);
        log.info("  ‚îî‚îÄ‚îÄ Top K: {}", topK);
    }

    /**
     * M√©todo para testar a conex√£o com a API
     */
    public boolean testConnection(Client client) {
        try {
            if (!isConfigurationValid()) {
                return false;
            }
            
            log.info("üß™ Testando conex√£o com Gemini...");
            
            // Teste simples chamando generateContent atrav√©s do models
            var response = client.models.generateContent(
                modelName, 
                "Teste de conex√£o", 
                null
            );
            
            if (response != null && response.text() != null) {
                log.info("‚úÖ Conex√£o com Gemini estabelecida com sucesso");
                return true;
            } else {
                log.warn("‚ö†Ô∏è Resposta vazia do Gemini");
                return false;
            }
            
        } catch (Exception e) {
            log.error("‚ùå Falha no teste de conex√£o: {}", e.getMessage());
            return false;
        }
    }
}


