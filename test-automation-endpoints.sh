#!/bin/bash
# Script de teste para automa√ß√£o completa do AutoClipster
# Integra√ß√£o: Download ‚Üí An√°lise Gemini ‚Üí Processamento Autom√°tico

BASE_URL="http://localhost:8080"
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ TESTE DA AUTOMA√á√ÉO COMPLETA DO AUTOCLIPSTER${NC}"
echo "=============================================="

# Teste 1: Status da Automa√ß√£o
echo -e "\n${YELLOW}üìä 1. Consultando status atual da automa√ß√£o...${NC}"
curl -s -X GET "$BASE_URL/api/automation/status" \
  -H "Content-Type: application/json" | jq '.' || echo "‚ùå Erro na consulta"

# Teste 2: Teste de Automa√ß√£o R√°pida
echo -e "\n${YELLOW}üß™ 2. Executando teste de automa√ß√£o r√°pida...${NC}"
curl -s -X POST "$BASE_URL/api/automation/test" \
  -H "Content-Type: application/json" | jq '.' || echo "‚ùå Erro no teste"

# Teste 3: Workflow Completo para um Canal
echo -e "\n${YELLOW}üöÄ 3. Executando workflow completo para canal 'gaules'...${NC}"
curl -s -X POST "$BASE_URL/api/automation/execute" \
  -H "Content-Type: application/json" \
  -d '{
    "channelName": "gaules",
    "clipLimit": 3,
    "daysBack": 2
  }' | jq '.' || echo "‚ùå Erro no workflow"

# Aguardar um pouco para o processamento
echo -e "\n${BLUE}‚è≥ Aguardando 10 segundos para processamento...${NC}"
sleep 10

# Teste 4: Status Atualizado
echo -e "\n${YELLOW}üìä 4. Consultando status ap√≥s execu√ß√£o...${NC}"
curl -s -X GET "$BASE_URL/api/automation/status" \
  -H "Content-Type: application/json" | jq '.' || echo "‚ùå Erro na consulta"

# Teste 5: Workflow para M√∫ltiplos Canais (pequeno)
echo -e "\n${YELLOW}üîÑ 5. Executando workflow para m√∫ltiplos canais...${NC}"
curl -s -X POST "$BASE_URL/api/automation/execute-multiple" \
  -H "Content-Type: application/json" \
  -d '{
    "channelNames": ["gaules", "loud_coringa"],
    "clipLimitPerChannel": 2,
    "daysBack": 1
  }' | jq '.' || echo "‚ùå Erro no workflow m√∫ltiplo"

# Aguardar processamento
echo -e "\n${BLUE}‚è≥ Aguardando 15 segundos para processamento m√∫ltiplo...${NC}"
sleep 15

# Teste 6: Verificar Clips Baixados
echo -e "\n${YELLOW}üì• 6. Verificando clips baixados...${NC}"
curl -s -X GET "$BASE_URL/api/clips/downloaded" \
  -H "Content-Type: application/json" | jq '.' || echo "‚ùå Erro na consulta de clips"

# Teste 7: Reprocessamento de Clips que Falharam
echo -e "\n${YELLOW}üîÑ 7. Tentando reprocessar clips que falharam...${NC}"
curl -s -X POST "$BASE_URL/api/automation/retry-failed" \
  -H "Content-Type: application/json" | jq '.' || echo "‚ùå Erro no reprocessamento"

# Teste 8: Status Final da Automa√ß√£o
echo -e "\n${YELLOW}üìä 8. Status final da automa√ß√£o...${NC}"
curl -s -X GET "$BASE_URL/api/automation/status" \
  -H "Content-Type: application/json" | jq '.' || echo "‚ùå Erro na consulta final"

# Teste 9: Verificar An√°lises do Gemini
echo -e "\n${YELLOW}ü§ñ 9. Testando an√°lise individual do Gemini...${NC}"
curl -s -X POST "$BASE_URL/api/gemini/analyze" \
  -H "Content-Type: application/json" \
  -d '{
    "clipTitle": "GAULES DESTRUINDO NO CS2",
    "clipDescription": "Gaules fazendo clutch √©pico no CS2",
    "streamerName": "gaules",
    "gameName": "Counter-Strike 2"
  }' | jq '.' || echo "‚ùå Erro na an√°lise Gemini"

# Teste 10: An√°lise com Google Search
echo -e "\n${YELLOW}üîç 10. Testando an√°lise com Google Search...${NC}"
curl -s -X POST "$BASE_URL/api/gemini/analyze-search" \
  -H "Content-Type: application/json" \
  -d '{
    "clipTitle": "LOUD_CORINGA ACE INSANO",
    "clipDescription": "Coringa fazendo ace no Valorant",
    "streamerName": "loud_coringa",
    "gameName": "VALORANT"
  }' | jq '.' || echo "‚ùå Erro na an√°lise com Google Search"

# Teste 11: Limpeza (apenas mostrar, n√£o executar automaticamente)
echo -e "\n${YELLOW}üßπ 11. Comando para limpeza de clips antigos (n√£o executado):${NC}"
echo "curl -X DELETE \"$BASE_URL/api/automation/cleanup?daysToKeep=30\""

echo -e "\n${GREEN}‚úÖ TESTES DA AUTOMA√á√ÉO COMPLETA FINALIZADOS!${NC}"
echo -e "${BLUE}=============================================${NC}"
echo -e "${YELLOW}üìã RESUMO DOS TESTES:${NC}"
echo "1. ‚úÖ Status da automa√ß√£o"
echo "2. ‚úÖ Teste r√°pido"
echo "3. ‚úÖ Workflow completo (canal √∫nico)"
echo "4. ‚úÖ Status ap√≥s execu√ß√£o"
echo "5. ‚úÖ Workflow m√∫ltiplos canais"
echo "6. ‚úÖ Verifica√ß√£o de clips baixados"
echo "7. ‚úÖ Reprocessamento de falhas"
echo "8. ‚úÖ Status final"
echo "9. ‚úÖ An√°lise individual Gemini"
echo "10. ‚úÖ An√°lise com Google Search"
echo "11. üìù Comando de limpeza (informativo)"

echo -e "\n${BLUE}üîç PARA MONITORAR EM TEMPO REAL:${NC}"
echo "- Logs do servidor: tail -f logs/application.log"
echo "- Status: curl -s \"$BASE_URL/api/automation/status\" | jq"
echo "- Clips: curl -s \"$BASE_URL/api/clips/downloaded\" | jq"

echo -e "\n${GREEN}üéâ Sistema de automa√ß√£o completa testado!${NC}" 